{"version":3,"sources":["cldDisable.js","Fields/cldDateField.js","Fields/cldSelectField.js","Calender/dateRange.js","Calender/calender.js","index.js"],"names":["currentDate","Date","months","formatDay","date","format","addZeroToMonth","getMonth","addZeroToDate","getDate","Number","getFullYear","getDisableCertainDate","renderDate","disableCertainDate","disableCerDate","forEach","dt","formatDt","getDisableWhenRange","dateTypeId","rangeStartDate","rangeEndDate","disableCertainDateFormat","push","includes","CldDateField","disableState","selectType","selectedDateFromCld","selectedDate","useState","startDate","setStartDate","endDate","setEndDate","errMsgStart","setErrMsgStart","errMsgEnd","setErrMsgEnd","startDateFromField","endDateFromField","selectedDateFromField","setSelectedDateFromField","minDate","maxDate","minAndmaxDate","setminAndmaxDate","useEffect","timer","setTimeout","clearTimeout","disablefield","getDisableDateForField","handleDisableDateField","disableField","find","console","log","startSetError","e","code","preventDefault","_reactName","prevState","from","key","endSetError","className","type","id","value","onChange","target","handleStartDate","onKeyDown","onBlur","min","max","handleEndDate","defaultProps","SelectMonthField","dynMonth","dynYear","handleChangeSelect","disableMonthFunc","index","map","data","disabled","SelectYearField","startAndendYearOptions","yearoption","startYearOption","endYearOption","n","yearOptions","addDays","addupDay","result","setDate","dateRange","start","end","range","next","currentdate","days","CustomCalender","findDaysInMonth","findStartDayInMonth","getDay","useMemo","slotsDate","totalSlot","avaliableSlot","setGetDate","getStartDay","setGetStartDay","calenderDates","setCalenderDates","setDynMonth","setDynYear","baseId","setBaseId","rangeId","setRangeId","inRange","setInRange","setDisableArrow","multipleDate","setMultipleDate","startAndendDate","setStartAndendDate","handleDisableArrow","useCallback","month","year","disableArrow","getDisableDateForArrow","rangeCalculater","idDate","length","convertID","getStartDate","getEndDate","findGreater","allRangeDate","highLight","actualDateId","findedId","findIndex","li","removedSelect","filter","_i","removedActualDateId","oldArray","handleMouseEnter","event","dataset","info","handleRenderDate","noOfDate","i","dateId","rangeHightLight","highLightNum","inRangeCondition","showDisableWhenRange","disableSpecificDate","cssClassname","onMouseEnter","data-info","onClick","aria-hidden","trim","trDate","j","count","setFieldValue","da","selDt","fieldFindDaysInMonth","fieldFindStartDayInMonth","dateIdFromFiled","refreshDate","rangeCalculaterFromField","handleSelectMonth","handleSelectYear","onMouseLeave","d","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b600fb5b.chunk.js","sourcesContent":["const currentDate = new Date();\r\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n\r\n/**\r\n * @param {string} renderDate contain a date\r\n * @param {string} disableState contain a disable-state past || future\r\n * @returns {string} disable date\r\n */\r\nexport function getDisableDate(renderDate, disableState) {\r\n\r\n  let disableRange;\r\n  if (disableState === \"past\") {\r\n    let subractOneDay;\r\n    subractOneDay = new Date(renderDate);\r\n    subractOneDay.setDate(subractOneDay.getDate() + 1);\r\n    disableRange = subractOneDay < new Date() && \"cld_disableDate\";\r\n  } else if (disableState === \"future\") {\r\n    disableRange = renderDate >= new Date() && \"cld_disableDate\";\r\n  }\r\n  return disableRange;\r\n}\r\n\r\n/**\r\n * @param {string} disableState contain a disable-state past || future\r\n * @param {string} month contain a month value\r\n * @param {string} year contain a year value\r\n * @returns {boolean} for disable arrow\r\n */\r\nexport function getDisableDateForArrow(disableState, month, year) {\r\n  let disableArrow;\r\n  if(disableState === \"past\"){\r\n    disableArrow = currentDate.getMonth() >= month - 1 && currentDate.getFullYear() >= year ? true : false\r\n  }else if(disableState === \"future\"){\r\n    disableArrow = currentDate.getMonth() <= month - 1 && currentDate.getFullYear() <= year ? true : false\r\n  }\r\n  return disableArrow;\r\n}\r\n\r\n/**\r\n * @param {string} disableState contain a disable-state past || future\r\n * @returns {string} disable year\r\n */\r\nexport function getDisableYear(disableState) {\r\n  let disableYear;\r\n  if (disableState === \"past\") {\r\n    disableYear = {\r\n      startYearOption: currentDate.getFullYear(),\r\n      endYearOption: 2100,\r\n    };\r\n  } else if (disableState === \"future\") {\r\n    disableYear = {\r\n      startYearOption: 1921,\r\n      endYearOption: currentDate.getFullYear(),\r\n    };\r\n  }\r\n  return disableYear;\r\n}\r\n\r\n/**\r\n * @param {string} date contain date\r\n * @param {boolean} format contain boolean value\r\n * @returns {string} returns a formated date\r\n */\r\nexport function formatDay(date, format) {\r\n  if (date) {\r\n    const addZeroToMonth = date.getMonth() + 1 < 10 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;\r\n    const addZeroToDate = date.getDate() < 10 ? `0${date.getDate()}` : date.getDate();\r\n    if (format) {\r\n      return `${months[Number(addZeroToMonth) - 1]} ${addZeroToDate},${date.getFullYear()}`;\r\n    }\r\n    const dateIdFromCld = `${date.getFullYear()}-${addZeroToMonth}-${addZeroToDate}`;\r\n\r\n    return dateIdFromCld;\r\n  }\r\n  return \"\";\r\n}\r\n\r\n/**\r\n * @param {string} disableState contain a disable-state past || future\r\n * @returns {object} set the start date and end date in field\r\n */\r\nexport function getDisableDateForField(disableState) {\r\n  let disablefield;\r\n  if (disableState === \"past\") {\r\n    disablefield = {\r\n      minDate: formatDay(new Date()),\r\n      maxDate: \"2100-12-31\",\r\n    };\r\n  } else if (disableState === \"future\") {\r\n    disablefield = {\r\n      minDate: \"1921-01-01\",\r\n      maxDate: formatDay(new Date()),\r\n    };\r\n  }\r\n  return disablefield;\r\n}\r\n\r\n/**\r\n * @param {string} renderDate contain a date\r\n * @param {string} disableCertainDate contain a disable-state past || future\r\n * @returns {string} disable date\r\n */\r\n export function getDisableCertainDate(renderDate, disableCertainDate) {\r\n  let disableCerDate;\r\n  disableCertainDate.forEach((dt) => {\r\n    const formatDt = new Date(dt);\r\n    if (\r\n      formatDt.getDate() === renderDate.getDate() &&\r\n      formatDt.getMonth() === renderDate.getMonth() &&\r\n      formatDt.getFullYear() === renderDate.getFullYear()\r\n    ) {\r\n      disableCerDate = \"cld_disableDate\";\r\n    }\r\n  });\r\n  return disableCerDate;\r\n}\r\n\r\n/**\r\n * \r\n */\r\nexport function getDisableWhenRange(disableCertainDate, dateTypeId, rangeStartDate, rangeEndDate) {\r\n\r\n let disableCertainDateFormat = []\r\n\r\n  disableCertainDate.forEach((dt)=>{\r\n    disableCertainDateFormat.push(formatDay(new Date(dt)))\r\n  })\r\n  let disableWhenRange;\r\n  if((dateTypeId > rangeStartDate && dateTypeId < rangeEndDate) &&  disableCertainDateFormat.includes(formatDay(new Date(dateTypeId)))){\r\n    disableWhenRange = \"cld_disablebgColor\"\r\n  }else{\r\n    disableWhenRange = \"\"\r\n  }\r\n  return disableWhenRange;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getDisableDateForField, formatDay } from \"../cldDisable\";\r\nimport \"./cldDateField.css\";\r\n\r\n/**\r\n * @param {*} props all props\r\n * @returns {React.ReactElement} returns a date-input field\r\n */\r\nfunction CldDateField({ disableState, selectType, selectedDateFromCld, selectedDate, disableCertainDate }) {\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [errMsgStart, setErrMsgStart] = useState();\r\n  const [errMsgEnd, setErrMsgEnd] = useState();\r\n  const [selectedDateFromField, setSelectedDateFromField] = useState({\r\n    startDateFromField: \"\",\r\n    endDateFromField: \"\",\r\n  });\r\n  const [minAndmaxDate, setminAndmaxDate] = useState({\r\n    minDate: \"1921-01-01\",\r\n    maxDate: \"2100-12-31\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setErrMsgStart(\"\");\r\n      setErrMsgEnd(\"\");\r\n    }, 3000);\r\n    return () => clearTimeout(timer);\r\n  }, [errMsgStart, errMsgEnd]);\r\n\r\n  useEffect(() => {\r\n    if (disableState === \"past\" || disableState === \"future\") {\r\n      setminAndmaxDate(getDisableDateForField(disableState));\r\n    }\r\n  }, [disableState]);\r\n\r\n  useEffect(() => {\r\n    if (selectType === \"range\") {\r\n      const { startDate, endDate } = selectedDateFromCld;\r\n      setStartDate(formatDay(startDate));\r\n      setEndDate(formatDay(endDate));\r\n      setSelectedDateFromField({\r\n        startDateFromField: formatDay(startDate),\r\n        endDateFromField: formatDay(endDate),\r\n      });\r\n    } else {\r\n      const dateFromCld = selectedDateFromCld;\r\n      if (dateFromCld) {\r\n        setStartDate(formatDay(dateFromCld));\r\n      }\r\n    }\r\n  }, [selectType, selectedDateFromCld]);\r\n\r\n  /**\r\n   * @param {object} e contain selected start date\r\n   */\r\n  const handleStartDate = (e) => {\r\n    setStartDate(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * @param {object} e contain selected end date\r\n   */\r\n  const handleEndDate = (e) => {\r\n    setEndDate(e.target.value);\r\n  };\r\n\r\n  /**\r\n   * @param {string} date contain date\r\n   * @returns {boolean} return boolean\r\n   */\r\n  const handleDisableDateField = (date) => {\r\n    const disableField = disableCertainDate.find((dt) => formatDay(new Date(dt)) === formatDay(new Date(date)));\r\n    console.log(disableField, \"handleDisableDateField\");\r\n\r\n    return disableField;\r\n  };\r\n  /**\r\n   * @param {*} e contain selected start date\r\n   */\r\n  const startSetError = (e) => {\r\n    if (e.code === \"Space\") {\r\n      e.preventDefault();\r\n    }\r\n    if ((e.code === \"Enter\" && startDate) || (e._reactName === \"onBlur\" && startDate)) {\r\n      const { minDate, maxDate } = minAndmaxDate;\r\n      if (new Date(startDate) > new Date(maxDate)) {\r\n        setErrMsgStart(`Date must be ${formatDay(new Date(maxDate), true)} or earlier`);\r\n      } else if (new Date(startDate) < new Date(minDate)) {\r\n        setErrMsgStart(`Date must be ${formatDay(new Date(minDate), true)} or later`);\r\n      } else if (new Date(startDate) >= new Date(endDate)) {\r\n        setErrMsgStart(\"start Date should be lower than end Date\");\r\n        // setStartDate(selectedDateFromField.startDateFromField)\r\n      } else if (handleDisableDateField(startDate)) {\r\n        setErrMsgStart(\"Date must not be disabled date\");\r\n      } else {\r\n        setSelectedDateFromField((prevState) => ({\r\n          ...prevState,\r\n          startDateFromField: startDate,\r\n        }));\r\n        selectedDate({\r\n          startDateFromField: startDate,\r\n          endDateFromField: selectedDateFromField.endDateFromField,\r\n          from: \"startDateSelect\",\r\n        });\r\n      }\r\n    } else if (e.key === \"Enter\" && !startDate) {\r\n      setErrMsgStart(\"Please enter a valid Date\");\r\n    }\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {*} e contain selected end date\r\n   */\r\n  const endSetError = (e) => {\r\n    if (e.code === \"Space\") {\r\n      e.preventDefault();\r\n    }\r\n    if ((e.code === \"Enter\" && endDate) || (e._reactName === \"onBlur\" && endDate)) {\r\n      const { minDate, maxDate } = minAndmaxDate;\r\n      if (new Date(endDate) > new Date(maxDate)) {\r\n        setErrMsgEnd(`Date must be ${formatDay(new Date(maxDate), true)} or earlier`);\r\n      } else if (new Date(endDate) < new Date(minDate)) {\r\n        setErrMsgEnd(`Date must be ${formatDay(new Date(minDate), true)} or later`);\r\n      } else if (new Date(startDate) >= new Date(endDate)) {\r\n        setErrMsgEnd(\"End Date should be greater than start Date\");\r\n        // setEndDate(selectedDateFromField.endDateFromField)\r\n      } else if (!startDate) {\r\n        setStartDate(endDate);\r\n        setEndDate(\"\");\r\n        setSelectedDateFromField((prevState) => ({\r\n          ...prevState,\r\n          startDateFromField: endDate,\r\n        }));\r\n        selectedDate({\r\n          startDateFromField: endDate,\r\n          endDateFromField: selectedDateFromField.endDateFromField,\r\n          from: \"startDateSelect\",\r\n        });\r\n      } else if (handleDisableDateField(endDate)) {\r\n        setErrMsgEnd(\"Date must not be disabled date\");\r\n      } else {\r\n        setSelectedDateFromField({\r\n          startDateFromField: selectedDateFromField.startDateFromField,\r\n          endDateFromField: endDate,\r\n        });\r\n\r\n        selectedDate({\r\n          startDateFromField: selectedDateFromField.startDateFromField,\r\n          endDateFromField: endDate,\r\n          from: \"endDateSelect\",\r\n        });\r\n      }\r\n    } else if (e.key === \"Enter\" && !endDate) {\r\n      setErrMsgEnd(\"Please enter a valid Date\");\r\n    }\r\n  };\r\n\r\n  // console.log(startDate, endDate,selectedDateFromField, minAndmaxDate, \"selectedDateFromField\");\r\n\r\n  return (\r\n    <>\r\n      <div className={`${selectType === \"range\" ? \"cld_fieldContainer\" : \"cld_startDateFieldOnly\"}`}>\r\n        <div>\r\n          <input\r\n            type=\"date\"\r\n            id=\"start_Cld_Field\"\r\n            value={startDate}\r\n            onChange={(e) => handleStartDate(e)}\r\n            onKeyDown={(e) => startSetError(e)}\r\n            onBlur={startSetError}\r\n            min={minAndmaxDate.minDate}\r\n            max={minAndmaxDate.maxDate}\r\n          />\r\n        </div>\r\n        {selectType === \"range\" && (\r\n          <div>\r\n            <input\r\n              type=\"date\"\r\n              id=\"end_Cld_Field\"\r\n              value={endDate}\r\n              onChange={(e) => handleEndDate(e)}\r\n              onKeyDown={(e) => endSetError(e)}\r\n              onBlur={endSetError}\r\n              min={minAndmaxDate.minDate}\r\n              max={minAndmaxDate.maxDate}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={`${selectType === \"range\" ? \"cld_errmsgContainer\" : \"cld_startaerrmsg\"}`}>\r\n        <div className={`cld_errmsg ${errMsgStart && \"hidecld_errmsg\"}`}>{errMsgStart}</div>\r\n        {selectType === \"range\" && <div className={`cld_errmsg ${errMsgEnd && \"hidecld_errmsg\"}`}>{errMsgEnd}</div>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nCldDateField.propTypes = {\r\n  disableState: PropTypes.string,\r\n  selectType: PropTypes.string.isRequired,\r\n  selectedDateFromCld: PropTypes.object.isRequired,\r\n  selectedDate: PropTypes.func.isRequired,\r\n  disableCertainDate: PropTypes.array,\r\n};\r\n\r\nCldDateField.defaultProps = {\r\n  disableState: \"\",\r\n  disableCertainDate: [],\r\n};\r\n\r\nexport default CldDateField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst months = [\r\n  \"January\",\r\n  \"February\",\r\n  \"March\",\r\n  \"April\",\r\n  \"May\",\r\n  \"June\",\r\n  \"July\",\r\n  \"August\",\r\n  \"September\",\r\n  \"October\",\r\n  \"November\",\r\n  \"December\",\r\n];\r\nconst currentDate = new Date();\r\n\r\n/**\r\n * @param {*} props all props\r\n * @returns {object} returns a select field(Month)\r\n */\r\nexport function SelectMonthField({ disableState, dynMonth, dynYear, handleChangeSelect }) {\r\n  /**\r\n   * @param {number} index contain id\r\n   * @returns {boolean} returns a boolean value\r\n   */\r\n  const disableMonthFunc = (index) => {\r\n    let disableMon;\r\n    if (disableState === \"past\") {\r\n      disableMon = currentDate.getFullYear() === dynYear && currentDate.getMonth() > index;\r\n    } else if (disableState === \"future\") {\r\n      disableMon = currentDate.getFullYear() === dynYear && currentDate.getMonth() < index;\r\n    } else {\r\n      disableMon = false;\r\n    }\r\n    return disableMon;\r\n  };\r\n\r\n  return (\r\n    <select id=\"selectMonth\" value={dynMonth - 1} onChange={(e) => handleChangeSelect(e)}>\r\n      {months.map((data, index) => {\r\n        return (\r\n          <option disabled={disableMonthFunc(index)} key={data} value={index}>\r\n            {data}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n}\r\n\r\nSelectMonthField.propTypes = {\r\n  disableState: PropTypes.string,\r\n  dynMonth: PropTypes.number.isRequired,\r\n  dynYear: PropTypes.number.isRequired,\r\n  handleChangeSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nSelectMonthField.defaultProps = {\r\n  disableState: \"\",\r\n};\r\n\r\n/**\r\n * @param {*} props all props\r\n * @returns {object} returns a select field(Month)\r\n */\r\nexport function SelectYearField({ dynYear, startAndendYearOptions, handleChangeSelect }) {\r\n  /**\r\n   *\r\n   * @returns {Array} returns no. of year values\r\n   */\r\n  const yearOptions = () => {\r\n    const yearoption = [];\r\n    const { startYearOption, endYearOption } = startAndendYearOptions;\r\n    for (let n = startYearOption; n <= endYearOption; n += 1) {\r\n      yearoption.push(n);\r\n    }\r\n    return yearoption;\r\n  };\r\n  return (\r\n    <select id=\"selectYear\" value={dynYear} onChange={(e) => handleChangeSelect(e)}>\r\n      {yearOptions().map((data) => {\r\n        return (\r\n          <option key={data} value={data}>\r\n            {data}\r\n          </option>\r\n        );\r\n      })}\r\n    </select>\r\n  );\r\n}\r\n\r\nSelectYearField.propTypes = {\r\n  dynYear: PropTypes.number.isRequired,\r\n  startAndendYearOptions: PropTypes.object.isRequired,\r\n  handleChangeSelect: PropTypes.func.isRequired,\r\n};\r\n","/**\r\n * @param {object} date contain date\r\n * @param {number} addupDay to plus one date\r\n * @returns {string} returns date\r\n */\r\nconst addDays = (date, addupDay = 1) => {\r\nconst result = new Date(date);\r\nresult.setDate(result.getDate() + addupDay);\r\nreturn result;\r\n};\r\n\r\n/**\r\n * @param {object} start contain startdate\r\n * @param {object} end contain enddate\r\n * @param {object} range contain the date\r\n * @returns {string} returns dateRange\r\n */\r\nexport const dateRange = (start, end, range = []) => {\r\nif (start > end) return range;\r\nconst next = addDays(start, 1);\r\nreturn dateRange(next, end, [...range, start]);\r\n};\r\n","import React, { useEffect, useState, useCallback, useMemo } from \"react\";\r\nimport CldDateField from \"../Fields/cldDateField\";\r\nimport {\r\n  getDisableDate,\r\n  getDisableDateForArrow,\r\n  getDisableYear,\r\n  getDisableCertainDate,\r\n  getDisableWhenRange,\r\n} from \"../cldDisable\";\r\nimport { SelectMonthField, SelectYearField } from \"../Fields/cldSelectField\";\r\nimport { dateRange } from \"./dateRange\"\r\nimport \"./calender.css\";\r\n\r\nconst currentdate = new Date();\r\nconst days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n\r\n/**\r\n *@returns {React.ReactElement} returns a calender with single, multiple and range options\r\n */\r\nfunction CustomCalender() {\r\n  const findDaysInMonth = new Date(currentdate.getFullYear(), currentdate.getMonth() + 1, 0).getDate();\r\n  const findStartDayInMonth = new Date(currentdate.getFullYear(), currentdate.getMonth(), 1).getDay();\r\n  const disableState = \"\";\r\n  const slotState = \"\";\r\n  const disableCertainDate = useMemo(() => {\r\n    return [\"2021-06-04\", \"2021-06-07\", \"2021-06-8\", \"2021-06-15\", \"2020-06-21\"];\r\n  }, []);\r\n  // const disableCertainDate = useMemo(() => {\r\n  //   return [];\r\n  // }, []);\r\n  const slotsDate = useMemo(() => {\r\n    return [{date:\"2021-06-02\",totalSlot:\"30\",avaliableSlot: \"4\"},{date:\"2021-06-10\",totalSlot:\"30\",avaliableSlot: \"5\"},{date:\"2021-06-05\",totalSlot:\"30\",avaliableSlot: \"6\"},{date:\"2021-06-02\",totalSlot:\"30\",avaliableSlot: \"14\"},{date:\"2020-06-02\",totalSlot:\"28\",avaliableSlot: \"24\"},{date:\"2021-6-11\",totalSlot:\"30\",avaliableSlot: \"0\"},{date:\"2021-06-25\",totalSlot:\"50\",avaliableSlot: \"30\"}];\r\n  }, []);\r\n  // const slotsDate = useMemo(() => {\r\n  //   return [];\r\n  // }, []);\r\n  const [selectType] = useState(\"range\");\r\n  const [getDate, setGetDate] = useState(findDaysInMonth);\r\n  const [getStartDay, setGetStartDay] = useState(findStartDayInMonth);\r\n  const [calenderDates, setCalenderDates] = useState();\r\n  const [dynMonth, setDynMonth] = useState(currentdate.getMonth() + 1);\r\n  const [dynYear, setDynYear] = useState(currentdate.getFullYear());\r\n  const [baseId, setBaseId] = useState([]);\r\n  const [rangeId, setRangeId] = useState([]);\r\n  const [inRange, setInRange] = useState();\r\n  const [disableArrow, setDisableArrow] = useState();\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [multipleDate, setMultipleDate] = useState(\"\");\r\n  const [startAndendDate, setStartAndendDate] = useState({\r\n    startDate: \"\",\r\n    endDate: \"\",\r\n  });\r\n  const [startAndendYearOptions, setstartAndendYearOptions] = useState({\r\n    startYearOption: 1921,\r\n    endYearOption: 2100,\r\n  });\r\n\r\n  const handleDisableArrow = useCallback(() => {\r\n    setDisableArrow(getDisableDateForArrow(disableState, dynMonth, dynYear));\r\n  }, [dynMonth, dynYear]);\r\n\r\n  useEffect(() => {\r\n    handleDisableArrow();\r\n  }, [handleDisableArrow]);\r\n\r\n  useEffect(() => {\r\n    if (disableState === \"past\" || disableState === \"future\") {\r\n      setstartAndendYearOptions(getDisableYear(disableState));\r\n    }\r\n  }, []);\r\n\r\n  const rangeCalculater = useCallback(\r\n    (id) => {\r\n      const idDate = new Date(id);\r\n      if (rangeId.length === 0) {\r\n        const convertID = `${idDate.getDate()}${idDate.getMonth() + 1}${idDate.getFullYear()}`;\r\n        setRangeId([convertID]);\r\n        setStartAndendDate((prevState) => ({\r\n          ...prevState,\r\n          startDate: idDate,\r\n        }));\r\n        setInRange();\r\n      } else if (rangeId.length === 1) {\r\n        let getStartDate;\r\n        let getEndDate;\r\n        const findGreater = new Date(startAndendDate.startDate) < idDate;\r\n        if (findGreater) {\r\n          getStartDate = startAndendDate.startDate;\r\n          getEndDate = idDate;\r\n        } else {\r\n          getStartDate = idDate;\r\n          getEndDate = startAndendDate.startDate;\r\n        }\r\n\r\n        const range = dateRange(new Date(getStartDate), new Date(getEndDate));\r\n        const allRangeDate = range.map((date) => `${date.getDate()}${date.getMonth() + 1}${date.getFullYear()}`);\r\n\r\n        setRangeId(allRangeDate);\r\n        setInRange();\r\n        if (findGreater) {\r\n          setStartAndendDate({\r\n            startDate: startAndendDate.startDate,\r\n            endDate: idDate,\r\n          });\r\n        } else {\r\n          setStartAndendDate({\r\n            startDate: idDate,\r\n            endDate: startAndendDate.startDate,\r\n          });\r\n        }\r\n      } else {\r\n        const convertID = `${idDate.getDate()}${idDate.getMonth() + 1}${idDate.getFullYear()}`;\r\n        setRangeId([convertID]);\r\n        setStartAndendDate({\r\n          startDate: idDate,\r\n        });\r\n      }\r\n    },\r\n    [rangeId, startAndendDate],\r\n  );\r\n\r\n  const highLight = useCallback(\r\n    (id, actualDateId) => {\r\n      switch (selectType) {\r\n        case \"single\":\r\n          setBaseId([id]);\r\n          setStartDate(new Date(actualDateId));\r\n          break;\r\n        case \"multiple\":\r\n          if (!baseId.includes(id)) {\r\n            setBaseId((oldArray) => [...oldArray, id]);\r\n            setMultipleDate((oldArray) => [...oldArray, new Date(actualDateId)]);\r\n          } else {\r\n            const findedId = baseId.findIndex((li) => li === id);\r\n            const removedSelect = baseId.filter((_i, index) => findedId !== index);\r\n            const removedActualDateId = multipleDate.filter((_i, index) => findedId !== index);\r\n            setBaseId(removedSelect);\r\n            setMultipleDate(removedActualDateId);\r\n          }\r\n          break;\r\n        case \"range\":\r\n          rangeCalculater(id);\r\n          break;\r\n        default:\r\n      }\r\n    },\r\n    [baseId, multipleDate, rangeCalculater, selectType],\r\n  );\r\n  /**\r\n   * @param {object} event mouseHover data-info\r\n   */\r\n  const handleMouseEnter = (event) => {\r\n    setInRange(event.target.dataset.info);\r\n  };\r\n\r\n  const handleRenderDate = useCallback(() => {\r\n    const noOfDate = [];\r\n    for (let i = 1; i <= getDate + getStartDay; i += 1) {\r\n      if (i <= getStartDay) {\r\n        noOfDate.push(<td />);\r\n      } else {\r\n        const dateId = `${i - getStartDay}${dynMonth}${dynYear}`;\r\n        const dateTypeId = `${dynYear}-${dynMonth}-${i - getStartDay}`;\r\n        // range classname for start,between and end\r\n        let rangeHightLight;\r\n        if (rangeId[0] === dateId) {\r\n          rangeHightLight = \"cld_highlightFirstNum\";\r\n        } else if (rangeId[rangeId.length - 1] === dateId) {\r\n          rangeHightLight = \"cld_highlightLastNum\";\r\n        } else if (rangeId.includes(dateId)) {\r\n          rangeHightLight = \"cld_highlightNum\";\r\n        }\r\n        // firstOrder change className\r\n        const rangeStartDate = startAndendDate.startDate && startAndendDate.startDate;\r\n        const rangeEndDate = startAndendDate.endDate && startAndendDate.endDate;\r\n        if (rangeId.length === 1 && rangeStartDate.getDate() > Number(inRange)) {\r\n          rangeHightLight = rangeId[0] === dateId && \"cld_highlightLastNum\";\r\n        }\r\n        // classname for range, single and multiple\r\n        const highLightNum = `${\r\n          selectType === \"range\" ? `${rangeHightLight || \"\"}` : baseId.includes(dateId) && \"cld_highlightNumCircle\"\r\n        }`;\r\n        // startDate and endDate between ranges\r\n        let inRangeCondition;\r\n        if (rangeId.length === 1) {\r\n          if (dynYear === rangeStartDate.getFullYear() && dynMonth === rangeStartDate.getMonth() + 1) {\r\n            inRangeCondition =\r\n              (Number(inRange) >= i - getStartDay &&\r\n                rangeStartDate.getDate() < i - getStartDay &&\r\n                \"cld_inrange cld_inrangeLastIndex\") ||\r\n              (Number(inRange) <= i - getStartDay &&\r\n                rangeStartDate.getDate() > i - getStartDay &&\r\n                \"cld_inrange cld_inrangeFirstIndex\");\r\n          } else if (rangeStartDate < new Date(`${dynYear}-${dynMonth}-${Number(inRange)}`)) {\r\n            inRangeCondition = Number(inRange) >= i - getStartDay && \"cld_inrange cld_inrangeLastIndex\";\r\n          } else {\r\n            inRangeCondition = Number(inRange) <= i - getStartDay && \"cld_inrange cld_inrangeFirstIndex\";\r\n          }\r\n        }\r\n        // disableDate\r\n        const disableDate = disableState ? getDisableDate(new Date(dateTypeId), disableState) : \"\";\r\n\r\n        const showDisableWhenRange =\r\n          rangeId.length > 1 &&\r\n          getDisableWhenRange(disableCertainDate, new Date(dateTypeId), rangeStartDate, rangeEndDate);\r\n\r\n        const disableSpecificDate =\r\n          disableCertainDate.length > 0 ? getDisableCertainDate(new Date(dateTypeId), disableCertainDate) : \"\";\r\n\r\n        // wrappe all classname\r\n        const cssClassname =\r\n          disableDate ||\r\n          disableSpecificDate ||\r\n          `${highLightNum} ${selectType !== \"range\" ? \"cld_cellSingleMultiple\" : \"\"} ${\r\n            rangeId.length !== 1 && \"cld_cellactive\"\r\n          } ${inRangeCondition || \"\"}`;\r\n\r\n        noOfDate.push(\r\n          <td\r\n            onMouseEnter={(!disableDate || !disableSpecificDate) && rangeId.length === 1 ? handleMouseEnter : null}\r\n            data-info={i - getStartDay}\r\n            onClick={\r\n              disableDate || disableSpecificDate\r\n                ? null\r\n                : () => highLight(selectType === \"range\" ? dateTypeId : dateId, dateTypeId)\r\n            }\r\n            aria-hidden=\"true\"\r\n          ><>\r\n            {slotsDate.length > 0 && <span className=\"cld_slots cld_availableSlots\" >{i}</span>}\r\n              <div data-info={i - getStartDay} className={`cld_cellHover ${showDisableWhenRange} ${cssClassname.trim()}`}>\r\n                {i - getStartDay}\r\n              </div>\r\n            {slotsDate.length > 0 && <span className=\"cld_slots cld_totalSlots\" >99</span>}\r\n            </>\r\n          </td>,\r\n        );\r\n      }\r\n    }\r\n\r\n    const trDate = [];\r\n    for (let j = 0; j < noOfDate.length; j += 1) {\r\n      let count = 0 + j;\r\n      if (j % 7 === 0) {\r\n        trDate.push(\r\n          <tr key={count}>\r\n            {noOfDate[count + 0] || <td key={count + 0} />}\r\n            {noOfDate[count + 1] || <td key={count + 1} />}\r\n            {noOfDate[count + 2] || <td key={count + 2} />}\r\n            {noOfDate[count + 3] || <td key={count + 3} />}\r\n            {noOfDate[count + 4] || <td key={count + 4} />}\r\n            {noOfDate[count + 5] || <td key={count + 5} />}\r\n            {noOfDate[count + 6] || <td key={count + 6} />}\r\n          </tr>,\r\n        );\r\n        count += 1;\r\n      }\r\n    }\r\n    setCalenderDates(trDate);\r\n  }, [baseId, disableCertainDate, dynMonth, dynYear, getDate, getStartDay, highLight, inRange, rangeId, selectType, slotsDate, startAndendDate]);\r\n\r\n  useEffect(() => {\r\n    handleRenderDate();\r\n  }, [handleRenderDate, dynMonth, dynYear, baseId, rangeId, inRange]);\r\n\r\n  /**\r\n   * Action type for decrease the month and year\r\n   */\r\n  const handleLeft = () => {\r\n    handleDisableArrow();\r\n    setGetDate(new Date(dynYear, dynMonth - 1, 0).getDate());\r\n    setGetStartDay(new Date(dynYear, dynMonth - 2, 1).getDay());\r\n    if (dynMonth === 1) {\r\n      setDynYear(dynYear - 1);\r\n      setDynMonth(12);\r\n    } else {\r\n      setDynMonth(dynMonth - 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Action type for increase the month and year\r\n   */\r\n  const handleRight = () => {\r\n    handleDisableArrow();\r\n    setGetDate(new Date(dynYear, dynMonth + 1, 0).getDate());\r\n    setGetStartDay(new Date(dynYear, dynMonth, 1).getDay());\r\n    if (dynMonth === 12) {\r\n      setDynYear(dynYear + 1);\r\n      setDynMonth(1);\r\n    } else {\r\n      setDynMonth(dynMonth + 1);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Action type for select the specific month\r\n   *\r\n   * @param {object} e contain selected option value\r\n   */\r\n  const handleSelectMonth = (e) => {\r\n    setDynMonth(Number(e.target.value) + 1);\r\n    setGetDate(new Date(dynYear, Number(e.target.value) + 1, 0).getDate());\r\n    setGetStartDay(new Date(dynYear, Number(e.target.value), 1).getDay());\r\n  };\r\n\r\n  /**\r\n   * Action type for select the specific year\r\n   *\r\n   * @param {object} e contain selected option value\r\n   */\r\n  const handleSelectYear = (e) => {\r\n    setDynYear(Number(e.target.value));\r\n    setGetDate(new Date(e.target.value, dynMonth, 0).getDate());\r\n    setGetStartDay(new Date(e.target.value, dynMonth - 1, 1).getDay());\r\n  };\r\n\r\n  /**\r\n   * Action type for select the specific year\r\n   *\r\n   * @param {object} id contain selected date\r\n   */\r\n  const rangeCalculaterFromField = (id) => {\r\n    if (id.startDateFromField && id.endDateFromField) {\r\n      const getStartDate = id.startDateFromField;\r\n      const getEndDate = id.endDateFromField;\r\n\r\n      const range = dateRange(new Date(getStartDate), new Date(getEndDate));\r\n      const allRangeDate = range.map((date) => `${date.getDate()}${date.getMonth() + 1}${date.getFullYear()}`);\r\n\r\n      setRangeId(allRangeDate);\r\n      setStartAndendDate({\r\n        startDate: new Date(id.startDateFromField),\r\n        endDate: new Date(id.endDateFromField),\r\n      });\r\n    } else {\r\n      const idDate = new Date(id.startDateFromField || id.endDateFromField);\r\n      const convertID = `${idDate.getDate()}${idDate.getMonth() + 1}${idDate.getFullYear()}`;\r\n      setRangeId([convertID]);\r\n      setStartAndendDate((prevState) => ({\r\n        ...prevState,\r\n        startDate: new Date(id.startDateFromField) || new Date(id.endDateFromField),\r\n      }));\r\n    }\r\n\r\n    if (id.from) {\r\n      const refreshDate =\r\n        id.from === \"startDateSelect\" ? new Date(id.startDateFromField) : new Date(id.endDateFromField);\r\n      setDynMonth(refreshDate.getMonth() + 1);\r\n      setGetDate(new Date(refreshDate.getFullYear(), refreshDate.getMonth() + 1, 0).getDate());\r\n      setGetStartDay(new Date(refreshDate.getFullYear(), refreshDate.getMonth(), 1).getDay());\r\n      setDynYear(refreshDate.getFullYear());\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Return the selected date range from date-input field\r\n   *\r\n   * @param {object} da contain selected option value\r\n   */\r\n  const setFieldValue = (da) => {\r\n    if (selectType !== \"range\") {\r\n      const selDt = new Date(da.startDateFromField);\r\n      const fieldFindDaysInMonth = new Date(selDt.getFullYear(), selDt.getMonth() + 1, 0).getDate();\r\n      const fieldFindStartDayInMonth = new Date(selDt.getFullYear(), selDt.getMonth(), 1).getDay();\r\n      const dateIdFromFiled = `${selDt.getDate()}${selDt.getMonth() + 1}${selDt.getFullYear()}`;\r\n\r\n      setDynYear(selDt.getFullYear());\r\n      setDynMonth(selDt.getMonth() + 1);\r\n      setGetDate(fieldFindDaysInMonth);\r\n      setGetStartDay(fieldFindStartDayInMonth);\r\n\r\n      switch (selectType) {\r\n        case \"single\":\r\n          setBaseId([dateIdFromFiled]);\r\n          break;\r\n        case \"multiple\":\r\n          if (!baseId.includes(dateIdFromFiled)) {\r\n            setBaseId((oldArray) => [...oldArray, dateIdFromFiled]);\r\n          }\r\n          break;\r\n        default:\r\n      }\r\n    } else {\r\n      rangeCalculaterFromField(da);\r\n    }\r\n  };\r\n\r\n  /**\r\n   *@returns {string} seletedDate from calender single || multiple || range\r\n   */\r\n  const selectedDateFromCldFunc = () => {\r\n    let selDate;\r\n    if (selectType === \"single\") {\r\n      selDate = startDate;\r\n    } else if (selectType === \"multiple\") {\r\n      selDate = multipleDate[multipleDate.length - 1];\r\n    } else {\r\n      selDate = startAndendDate;\r\n    }\r\n    return selDate;\r\n  };\r\n\r\n  // console.log(startDate, multipleDate, startAndendDate, rangeId, dynYear, dynMonth, \"actualDate\");\r\n  return (\r\n    <div className=\"cld_container\">\r\n      <div>\r\n        <CldDateField\r\n          selectedDate={(da) => setFieldValue(da)}\r\n          selectType={selectType}\r\n          selectedDateFromCld={selectedDateFromCldFunc()}\r\n          disableState={disableState}\r\n          disableCertainDate={disableCertainDate}\r\n        />\r\n        <div className=\"cld_btnAlign\">\r\n          <button\r\n            disabled={(disableState === \"past\" && disableArrow) || (dynYear === 1921 && dynMonth === 1)}\r\n            onClick={() => handleLeft()}\r\n            type=\"button\"\r\n          >\r\n            {\"<\"}\r\n          </button>\r\n          <div className=\"cld_showDays\">\r\n            <SelectMonthField\r\n              disableState={disableState}\r\n              dynMonth={dynMonth}\r\n              dynYear={dynYear}\r\n              handleChangeSelect={(e) => handleSelectMonth(e)}\r\n            />\r\n            <SelectYearField\r\n              startAndendYearOptions={startAndendYearOptions}\r\n              dynYear={dynYear}\r\n              handleChangeSelect={(e) => handleSelectYear(e)}\r\n            />\r\n          </div>\r\n          <button\r\n            disabled={(disableState === \"future\" && disableArrow) || (dynYear === 2100 && dynMonth === 12)}\r\n            onClick={() => handleRight()}\r\n            type=\"button\"\r\n          >\r\n            {\">\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <table onMouseLeave={rangeId.length === 1 ? () => setInRange() : null}>\r\n        <thead>\r\n          <tr>\r\n            {days.map((d) => (\r\n              <th key={d}>{d}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{calenderDates}</tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CustomCalender;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CustomCalender from './Calender/calender';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CustomCalender />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}